[{"path":"https://jofrhwld.github.io/syllabifyr/CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://jofrhwld.github.io/syllabifyr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Josef Fruehwald Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jofrhwld.github.io/syllabifyr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Josef Fruehwald. Maintainer.","code":""},{"path":"https://jofrhwld.github.io/syllabifyr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fruehwald J (2020). syllabifyr: Syllabifier CMU Dictionary Transcriptions.","code":"@Manual{,   title = {syllabifyr: Syllabifier for CMU Dictionary Transcriptions},   author = {Josef Fruehwald},   year = {2020}, }"},{"path":"https://jofrhwld.github.io/syllabifyr/index.html","id":"syllabifyr-","dir":"","previous_headings":"","what":"Syllabifier for CMU Dictionary Transcriptions","title":"Syllabifier for CMU Dictionary Transcriptions","text":"goal syllabifyr provide tidy syllabification phonetic transcriptions. far, CMU dict transcriptions supported. ’ve largely utilized approach Kyle Gorman’s python implementation","code":""},{"path":"https://jofrhwld.github.io/syllabifyr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Syllabifier for CMU Dictionary Transcriptions","text":"syllabifyr now Cran can also install syllabifyr github :","code":"install.packages(\"syllabifyr\") # install.packages(\"devtools\") devtools::install_github(\"JoFrhwld/syllabifyr\")"},{"path":"https://jofrhwld.github.io/syllabifyr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Syllabifier for CMU Dictionary Transcriptions","text":"","code":"library(syllabifyr) syllabify(\"AO0 S T R EY1 L Y AH0\") #> # A tibble: 8 × 4 #>    syll part    phone stress #>   <dbl> <chr>   <chr> <chr>  #> 1     1 nucleus AO    0      #> 2     2 onset   S     1      #> 3     2 onset   T     1      #> 4     2 onset   R     1      #> 5     2 nucleus EY    1      #> 6     2 coda    L     1      #> 7     3 onset   Y     0      #> 8     3 nucleus AH    0 syllabify(c(\"AO0\", \"S\", \"T\", \"R\", \"EY1\", \"L\", \"Y\", \"AH0\")) #> # A tibble: 8 × 4 #>    syll part    phone stress #>   <dbl> <chr>   <chr> <chr>  #> 1     1 nucleus AO    0      #> 2     2 onset   S     1      #> 3     2 onset   T     1      #> 4     2 onset   R     1      #> 5     2 nucleus EY    1      #> 6     2 coda    L     1      #> 7     3 onset   Y     0      #> 8     3 nucleus AH    0 library(tidyverse) #> Warning: package 'ggplot2' was built under R version 4.3.1 #> Warning: package 'lubridate' was built under R version 4.3.1  syllabficiation <- tribble(~word, ~transcription,                           \"Alaska\", \"AH0 L AE1 S K AH0\",                           \"constraint\", \"K AH0 N S T R EY1 N T\",                           \"canyon\", \"K AE1 N Y AH0 N\",                           \"value\", \"V AE1 L Y UW0\")%>%                         mutate(syllable_df = map(transcription, syllabify)) syllabficiation$syllable_df[[1]] #> # A tibble: 6 × 4 #>    syll part    phone stress #>   <dbl> <chr>   <chr> <chr>  #> 1     1 nucleus AH    0      #> 2     2 onset   L     1      #> 3     2 nucleus AE    1      #> 4     2 coda    S     1      #> 5     3 onset   K     0      #> 6     3 nucleus AH    0 syllabficiation$syllable_df[[2]] #> # A tibble: 9 × 4 #>    syll part    phone stress #>   <dbl> <chr>   <chr> <chr>  #> 1     1 onset   K     0      #> 2     1 nucleus AH    0      #> 3     1 coda    N     0      #> 4     2 onset   S     1      #> 5     2 onset   T     1      #> 6     2 onset   R     1      #> 7     2 nucleus EY    1      #> 8     2 coda    N     1      #> 9     2 coda    T     1 syllabficiation$syllable_df[[3]] #> # A tibble: 6 × 4 #>    syll part    phone stress #>   <dbl> <chr>   <chr> <chr>  #> 1     1 onset   K     1      #> 2     1 nucleus AE    1      #> 3     1 coda    N     1      #> 4     2 onset   Y     0      #> 5     2 nucleus AH    0      #> 6     2 coda    N     0 syllabficiation$syllable_df[[4]] #> # A tibble: 5 × 4 #>    syll part    phone stress #>   <dbl> <chr>   <chr> <chr>  #> 1     1 onset   V     1      #> 2     1 nucleus AE    1      #> 3     1 coda    L     1      #> 4     2 onset   Y     0      #> 5     2 nucleus UW    0"},{"path":"https://jofrhwld.github.io/syllabifyr/reference/make_onset_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"make onset indices — make_onset_indices","title":"make onset indices — make_onset_indices","text":"make onset indices","code":""},{"path":"https://jofrhwld.github.io/syllabifyr/reference/make_onset_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make onset indices — make_onset_indices","text":"","code":"make_onset_indices(nuclei_indices)"},{"path":"https://jofrhwld.github.io/syllabifyr/reference/pronunciation_check_cmu.html","id":null,"dir":"Reference","previous_headings":"","what":"CMU pronunciation check — pronunciation_check_cmu","title":"CMU pronunciation check — pronunciation_check_cmu","text":"CMU pronunciation check","code":""},{"path":"https://jofrhwld.github.io/syllabifyr/reference/pronunciation_check_cmu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CMU pronunciation check — pronunciation_check_cmu","text":"","code":"pronunciation_check_cmu(pron)"},{"path":"https://jofrhwld.github.io/syllabifyr/reference/syllabify.html","id":null,"dir":"Reference","previous_headings":"","what":"Syllabify — syllabify","title":"Syllabify — syllabify","text":"take transcription input, return data frame.","code":""},{"path":"https://jofrhwld.github.io/syllabifyr/reference/syllabify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Syllabify — syllabify","text":"","code":"syllabify(pron, alaska_rule = T)"},{"path":"https://jofrhwld.github.io/syllabifyr/reference/syllabify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Syllabify — syllabify","text":"pron CMU dictionary pronunciation, either vector, string labels separated spaces alaska_rule maximize onset lax vowel + s sequences","code":""},{"path":"https://jofrhwld.github.io/syllabifyr/reference/syllabify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Syllabify — syllabify","text":"Returns data frame following columns syll numeric index syllable part part syllable phone belongs phone phone label transcription stress syllable stress","code":""},{"path":"https://jofrhwld.github.io/syllabifyr/reference/syllabify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Syllabify — syllabify","text":"","code":"# String input syllabify(\"AO0 S T R EY1 L Y AH0\") #> # A tibble: 8 × 4 #>    syll part    phone stress #>   <dbl> <chr>   <chr> <chr>  #> 1     1 nucleus AO    0      #> 2     2 onset   S     1      #> 3     2 onset   T     1      #> 4     2 onset   R     1      #> 5     2 nucleus EY    1      #> 6     2 coda    L     1      #> 7     3 onset   Y     0      #> 8     3 nucleus AH    0       # Vector input syllabify(c(\"AO0\", \"S\", \"T\", \"R\", \"EY1\", \"L\", \"Y\", \"AH0\")) #> # A tibble: 8 × 4 #>    syll part    phone stress #>   <dbl> <chr>   <chr> <chr>  #> 1     1 nucleus AO    0      #> 2     2 onset   S     1      #> 3     2 onset   T     1      #> 4     2 onset   R     1      #> 5     2 nucleus EY    1      #> 6     2 coda    L     1      #> 7     3 onset   Y     0      #> 8     3 nucleus AH    0       # Hiatus syllabify(\"HH AY0 EY1 T AH0 S\") #> # A tibble: 6 × 4 #>    syll part    phone stress #>   <dbl> <chr>   <chr> <chr>  #> 1     1 onset   HH    0      #> 2     1 nucleus AY    0      #> 3     2 nucleus EY    1      #> 4     3 onset   T     0      #> 5     3 nucleus AH    0      #> 6     3 coda    S     0       # Deficient transcriptions (has warning) syllabify(c(\"M\")) #> Warning: transcription 'M' is defective #> # A tibble: 1 × 4 #>    syll part  phone stress #>   <dbl> <chr> <chr> <chr>  #> 1     1 onset M     NA"},{"path":"https://jofrhwld.github.io/syllabifyr/reference/syllabify_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Syllabify to a list — syllabify_list","title":"Syllabify to a list — syllabify_list","text":"take transcription input, return list.","code":""},{"path":"https://jofrhwld.github.io/syllabifyr/reference/syllabify_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Syllabify to a list — syllabify_list","text":"","code":"syllabify_list(pron, alaska_rule = TRUE)"},{"path":"https://jofrhwld.github.io/syllabifyr/reference/syllabify_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Syllabify to a list — syllabify_list","text":"pron CMU dictionary pronunciation, either vector, string labels separated spaces alaska_rule maximize onset lax vowel + s sequences","code":""},{"path":"https://jofrhwld.github.io/syllabifyr/reference/syllabify_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Syllabify to a list — syllabify_list","text":"one value per syllable. value list, three values: onset, nucleus, coda. contain vector phones belong constituent part syllable. empty constituent parts value character(0)","code":""},{"path":"https://jofrhwld.github.io/syllabifyr/reference/syllabify_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Syllabify to a list — syllabify_list","text":"","code":"# String input syllabify_list(\"AO0 S T R EY1 L Y AH0\") #> [[1]] #> [[1]]$onset #> character(0) #>  #> [[1]]$nucleus #> [1] \"AO0\" #>  #> [[1]]$coda #> character(0) #>  #>  #> [[2]] #> [[2]]$onset #> [1] \"S\" \"T\" \"R\" #>  #> [[2]]$nucleus #> [1] \"EY1\" #>  #> [[2]]$coda #> [1] \"L\" #>  #>  #> [[3]] #> [[3]]$onset #> [1] \"Y\" #>  #> [[3]]$nucleus #> [1] \"AH0\" #>  #> [[3]]$coda #> character(0) #>  #>   # Vector input syllabify_list(c(\"AO0\", \"S\", \"T\", \"R\", \"EY1\", \"L\", \"Y\", \"AH0\")) #> [[1]] #> [[1]]$onset #> character(0) #>  #> [[1]]$nucleus #> [1] \"AO0\" #>  #> [[1]]$coda #> character(0) #>  #>  #> [[2]] #> [[2]]$onset #> [1] \"S\" \"T\" \"R\" #>  #> [[2]]$nucleus #> [1] \"EY1\" #>  #> [[2]]$coda #> [1] \"L\" #>  #>  #> [[3]] #> [[3]]$onset #> [1] \"Y\" #>  #> [[3]]$nucleus #> [1] \"AH0\" #>  #> [[3]]$coda #> character(0) #>  #>  # Hiatus syllabify_list(\"HH AY0 EY1 T AH0 S\") #> [[1]] #> [[1]]$onset #> [1] \"HH\" #>  #> [[1]]$nucleus #> [1] \"AY0\" #>  #> [[1]]$coda #> character(0) #>  #>  #> [[2]] #> [[2]]$onset #> character(0) #>  #> [[2]]$nucleus #> [1] \"EY1\" #>  #> [[2]]$coda #> character(0) #>  #>  #> [[3]] #> [[3]]$onset #> [1] \"T\" #>  #> [[3]]$nucleus #> [1] \"AH0\" #>  #> [[3]]$coda #> [1] \"S\" #>  #>   # Deficient transcriptions (has warning) syllabify_list(c(\"M\")) #> Warning: transcription 'M' is defective #> [[1]] #> [[1]]$onset #> [1] \"M\" #>  #> [[1]]$nucleus #> character(0) #>  #> [[1]]$coda #> character(0) #>  #>"},{"path":"https://jofrhwld.github.io/syllabifyr/reference/syllabify_test_dict.html","id":null,"dir":"Reference","previous_headings":"","what":"syllabify test dict — syllabify_test_dict","title":"syllabify test dict — syllabify_test_dict","text":"trans CMU transcription word word","code":""},{"path":"https://jofrhwld.github.io/syllabifyr/reference/syllabifyr.html","id":null,"dir":"Reference","previous_headings":"","what":"Syllabify: A package for doing tidy syllabification — syllabifyr","title":"Syllabify: A package for doing tidy syllabification — syllabifyr","text":"package tidy syllabification phonetic transcriptions. syllabifier \"maximizes onset\". algorithmic approach adapted Kyle Gorman's python implementation (https://github.com/kylebgorman/syllabify)","code":""},{"path":"https://jofrhwld.github.io/syllabifyr/reference/syllabifyr.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Syllabify: A package for doing tidy syllabification — syllabifyr","text":"key function syllabify(). Given CMU transcription, return tibble. See ?syllabify() info. Also available syllabify_list(). list representation syllables. See ?syllabify_list() info.","code":""},{"path":"https://jofrhwld.github.io/syllabifyr/news/index.html","id":"syllabifyr-011","dir":"Changelog","previous_headings":"","what":"syllabifyr 0.1.1","title":"syllabifyr 0.1.1","text":"CRAN release: 2020-10-24 updated tibble::data_frame() tibble::tibble()","code":""},{"path":"https://jofrhwld.github.io/syllabifyr/news/index.html","id":"syllabifyr-010","dir":"Changelog","previous_headings":"","what":"syllabifyr 0.1.0","title":"syllabifyr 0.1.0","text":"CRAN release: 2018-07-10 Added NEWS.md file track changes package. Initial release","code":""}]
